{
    "repo_notes": [
      {
        "content": ""
      }
    ],
    "pages": [
      {
        "title": "Home",
        "purpose": "Introduce the attention-branch-network repository, its purpose (interpretable image classification via dual-branch attention), and provide navigation to other sections",
        "page_notes": [
          {
            "content": ""
          }
        ]
      },
      {
        "title": "Getting Started",
        "purpose": "Guide users through installation, environment setup, and running their first training or visualization",
        "page_notes": [
          {
            "content": ""
          }
        ]
      },
      {
        "title": "Training Models",
        "purpose": "Comprehensive guide to training ABN models using train.py, including all command-line arguments, training strategies, and checkpoint management",
        "page_notes": [
          {
            "content": ""
          }
        ]
      },
      {
        "title": "Visualizing Attention Maps",
        "purpose": "Complete guide to generating and interpreting attention visualizations using visualize.py, including output interpretation and configuration options",
        "page_notes": [
          {
            "content": ""
          }
        ]
      },
      {
        "title": "ABN Architecture",
        "purpose": "Explain the Attention Branch Network architecture, its dual-branch design (attention + perception), and how attention modulation works",
        "page_notes": [
          {
            "content": ""
          }
        ]
      },
      {
        "title": "API Reference",
        "purpose": "Parent page introducing the ABN library's Python API and its main components",
        "page_notes": [
          {
            "content": ""
          }
        ]
      },
      {
        "title": "Configuration (AbnConfig)",
        "purpose": "Document the AbnConfig class, its parameters (arch, num_labels, label mappings), and supported ResNet variants",
        "parent": "API Reference",
        "page_notes": [
          {
            "content": ""
          }
        ]
      },
      {
        "title": "Model Classes",
        "purpose": "Document AbnModel and AbnModelForImageClassification classes, their forward passes, outputs (att_logits, per_logits, att_map), and loss computation",
        "parent": "API Reference",
        "page_notes": [
          {
            "content": ""
          }
        ]
      },
      {
        "title": "Image Processing",
        "purpose": "Document AbnImageProcessor and AbnImageProcessorForTraining classes, preprocessing pipelines, and data augmentation strategies",
        "parent": "API Reference",
        "page_notes": [
          {
            "content": ""
          }
        ]
      },
      {
        "title": "ResNet Backbone",
        "purpose": "Document the ResNetABN backbone architecture, attention/perception branch implementation, and factory functions for different ResNet variants",
        "parent": "API Reference",
        "page_notes": [
          {
            "content": ""
          }
        ]
      },
      {
        "title": "Hugging Face Integration",
        "purpose": "Explain integration with Hugging Face Hub, model uploading/downloading, AutoModel usage, and trust_remote_code mechanism",
        "page_notes": [
          {
            "content": ""
          }
        ]
      },
      {
        "title": "Using Pretrained Models",
        "purpose": "Guide for loading and using pretrained ABN models from Hugging Face Hub for inference, including code examples",
        "page_notes": [
          {
            "content": ""
          }
        ]
      },
      {
        "title": "Command-Line Reference",
        "purpose": "Parent page for detailed command-line tool documentation",
        "page_notes": [
          {
            "content": ""
          }
        ]
      },
      {
        "title": "train.py",
        "purpose": "Complete reference for train.py including all arguments, training hyperparameters, optimizer/scheduler configuration, and checkpoint management",
        "parent": "Command-Line Reference",
        "page_notes": [
          {
            "content": ""
          }
        ]
      },
      {
        "title": "visualize.py",
        "purpose": "Complete reference for visualize.py including all arguments, visualization parameters, attention overlay configuration, and output formats",
        "parent": "Command-Line Reference",
        "page_notes": [
          {
            "content": ""
          }
        ]
      },
      {
        "title": "Development Guide",
        "purpose": "Parent page for development-related documentation including project structure, dependencies, and contribution guidelines",
        "page_notes": [
          {
            "content": ""
          }
        ]
      },
      {
        "title": "Project Structure",
        "purpose": "Explain the repository layout, file organization, purpose of each directory, and code organization patterns",
        "parent": "Development Guide",
        "page_notes": [
          {
            "content": ""
          }
        ]
      },
      {
        "title": "Dependencies",
        "purpose": "Document all project dependencies (PyTorch, Hugging Face, OpenCV, etc.), version requirements, and dependency management using pyproject.toml and uv.lock",
        "parent": "Development Guide",
        "page_notes": [
          {
            "content": ""
          }
        ]
      },
      {
        "title": "Development Environment Setup",
        "purpose": "Guide for setting up a development environment, including Python version, virtual environments, development tools (black, isort), and testing",
        "parent": "Development Guide",
        "page_notes": [
          {
            "content": ""
          }
        ]
      }
    ]
  }